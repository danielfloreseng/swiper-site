extends ../_internal-template

block vars
  - var title = 'Swiper Angular';
  - var noCenterContent = true;
  - var withLeftNav = true;

block content
  .side-nav.demos-nav
    .side-nav-content
      include ../_sidebar-sponsors.pug
      ul
        li
          a(href="#getting-started") Getting started
        li
          a(href="#styles") Styles
        li
          a(href="#usage") Usage
        li
          a(href="#swiper-props") <span style="font-weight: 500">SwiperComponent</span> props
        li
          a(href="#swiper-events") <span style="font-weight: 500">SwiperComponent</span> events
        li
          a(href="#swiperslide-props") <span style="font-weight: 500">SwiperSlideDirective</span> props
        li
          a(href="#swiperslide-variables") <span style="font-weight: 500">SwiperSlideDirective</span> variables
        li
          a(href="#slots") Slots
        li
          a(href="#virtual-slides") Virtual Slides
        li
          a(href="#effects") Effects

  .api-content
    h1 Swiper Angular Components

    h2.no-border#getting-started Getting started

    h3 Step 1: Install Swiper

    p Swiper Angular plugin is available only via NPM as a part of the main Swiper library:
    ```
      npm i swiper
    ```

    h3 Step 2: Import `SwiperModule` module:

    ```js
      import { SwiperModule } from 'src/angular/src/public-api';

      @NgModule({
        imports: [SwiperModule],
      })
      export class YourAppModule {}
    ```

    h3 Step 3: Add styles:

    p Import Swipers CSS in `styles.scss`
    ```css
      @import "~swiper/swiper-bundle";
    ```
    p Or you can import only components that you need<br>Swiper package contains different sets of CSS, Less and SCSS styles:

    h4#styles CSS Styles

    p CSS styles available only for bundle version:

    ul
      li `swiper-bundle.css` - all Swiper styles including all components styles (like Navigation, Pagination, etc.)
      li `swiper-bundle.min.css` - same as previous but minified

    h4 Less Styles

    p Less styles are separate styles for core version and components:

    ul
      li `swiper.less` - only core Swiper styles
      li `components/a11y/a11y.less` - styles required for A11y component
      li `components/controller/controller.less` - styles required for Controller component
      li `components/effect-coverflow/effect-coverflow.less` - styles required for Coveflow Effect component
      li `components/effect-cube/effect-cube.less` - styles required for Cube Effect component
      li `components/effect-fade/effect-fade.less` - styles required for Fade Effect component
      li `components/effect-flip/effect-flip.less` - styles required for Flip Effect component
      li `components/lazy/lazy.less` - styles required for Lazy component
      li `components/navigation/navigation.less` - styles required for Navigation component
      li `components/pagination/pagination.less` - styles required for Pagination component
      li `components/scrollbar/scrollbar.less` - styles required for Scrollbar component
      li `components/thumbs/thumbs.less` - styles required for Thumbs component
      li `components/zoom/zoom.less` - styles required for Zoom component

    h4 SCSS Styles

    p SCSS styles are also separate styles for core version and components:

    ul
      li `swiper.scss` - only core Swiper styles
      li `components/a11y/a11y.scss` - styles required for A11y component
      li `components/controller/controller.scss` - styles required for Controller component
      li `components/effect-coverflow/effect-coverflow.scss` - styles required for Coveflow Effect component
      li `components/effect-cube/effect-cube.scss` - styles required for Cube Effect component
      li `components/effect-fade/effect-fade.scss` - styles required for Fade Effect component
      li `components/effect-flip/effect-flip.scss` - styles required for Flip Effect component
      li `components/lazy/lazy.scss` - styles required for Lazy component
      li `components/navigation/navigation.scss` - styles required for Navigation component
      li `components/pagination/pagination.scss` - styles required for Pagination component
      li `components/scrollbar/scrollbar.scss` - styles required for Scrollbar component
      li `components/thumbs/thumbs.scss` - styles required for Thumbs component
      li `components/zoom/zoom.scss` - styles required for Zoom component

    h2.no-border#usage Usage

    :code(lang="js")
      import { Component } from "@angular/core";

      // import Swiper core and required components
      import SwiperCore from "swiper/core";

      @Component({
        selector: "app-swiper-example",
        template: `
          <swiper [slidesPerView]="3" [spaceBetween]="50" (swiper)="onSwiper($event)" (slideChange)="onSlideChange()">
            <ng-template swiperSlide>Slide 1</ng-template>
            <ng-template swiperSlide>Slide 2</ng-template>
            <ng-template swiperSlide>Slide 3</ng-template>
          </swiper>
        `
      })
      export class AppComponent {
        onSwiper(swiper) {
          console.log(swiper)
        }
        onSlideChange() {
          console.log('slide change')
        }
      }


    .important-note
      p By default Swiper Angular uses core version of Swiper (without any additional components). If you want to use Navigation, Pagination and <a href="/api/#custom-build">other components</a>, you have to install them first.
    p Here is the list of additional modules imports:
    ul
      li <code>Virtual</code> - Virtual Slides module
      li <code>Keyboard</code> - Keyboard Control module
      li <code>Mousewheel</code> - Mousewheel Control module
      li <code>Navigation</code> - Navigation module
      li <code>Pagination</code> - Pagination module
      li <code>Scrollbar</code> - Scrollbar module
      li <code>Parallax</code> - Parallax module
      li <code>Zoom</code> - Zoom module
      li <code>Lazy</code> - Lazy module
      li <code>Controller</code> - Controller module
      li <code>A11y</code> - Accessibility module
      li <code>History</code> - History Navigation module
      li <code>HashNavigation</code> - Hash Navigation module
      li <code>Autoplay</code> - Autoplay module
      li <code>EffectFade</code> - Fade Effect module
      li <code>EffectCube</code> - Cube Effect module
      li <code>EffectFlip</code> - Flip Effect module
      li <code>EffectCoverflow</code> - Coverflow Effect module
      li <code>Thumbs</code> - Thumbs module

    :code(lang="js")
      import { Component } from "@angular/core";

      // import Swiper core and required components
      import SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper/core';

      // install Swiper components
      SwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);

      @Component({
        selector: "app-swiper-example",
        template: `
          <swiper [slidesPerView]="3" [spaceBetween]="50" (swiper)="onSwiper($event)" (slideChange)="onSlideChange()" [navigation]="true" [pagination]="{ clickable: true }" [scrollbar]="{ draggable: true }">
            <ng-template swiperSlide>Slide 1</ng-template>
            <ng-template swiperSlide>Slide 2</ng-template>
            <ng-template swiperSlide>Slide 3</ng-template>
            <ng-template swiperSlide>Slide 4</ng-template>
            <ng-template swiperSlide>Slide 5</ng-template>
            <ng-template swiperSlide>Slide 6</ng-template>
          </swiper>
        `
      })
      export class AppComponent {
        onSwiper(swiper) {
          console.log(swiper)
        }
        onSlideChange() {
          console.log('slide change')
        }
      }
    p <a href="https://stackblitz.com/edit/swiper-angular-example?file=src/app/app.component.ts">Edit on Stackblitz</a>

    h2.no-border#swiper-props `SwiperComponent` props

    p `Swiper` Angular component receive all <a href="/api/#parameters">Swiper parameters</a> as component props

    h2.no-border#swiper-events `SwiperComponent` events
    p Swiper component supports all <a href="/api/#events">Swiper events</a>, including additional `swiper` event that returns swiper instance as soon as posible. For example:

    ```html
      <swiper
        (swiper)="..."
        (slideChange)="..."
        (reachEnd)="..."
        ...
      >
    ```

    h2.no-border#swiperslide-props `SwiperSlideDirective` props

    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
        tr
          td virtualIndex
          td number
          td
          td Actual swiper slide index. Required to be set for virtual slides

    .important-note
      p
        b Swiper Angular forces the use of `ng-template` in favor of supporting full featured loop mode.
    ```html
      <swiper>
        <ng-template swiperSlide>
          <div>Slide</div>
        </ng-template>

        <ng-container *ngFor="slide of slides">
          <ng-template swiperSlide>
            <div>Slide</div>
          </ng-template>
        </ng-container>
      </swiper>
    ```

    h2.no-border#swiperslide-variables `SwiperSlideDirective` variables
    p `SwiperSlideDirective` exports the following variables:
    ul
      li `isActive` - true when current slide is active
      li `isPrev` - true when current slide is the previous from active
      li `isNext` - true when current slide is the next from active
      li `isVisible` - true when current slide is visible (`watchSlidesVisibility` Swiper parameter must be enabled)
      li `isDuplicate` - true when current slide is a duplicate slide (when `loop` mode enabled)
    p For example:

    ```html
      <swiper>
        <ng-template swiperSlide let-data>
          <div>Current slide is {{ data.isActive ? 'active' : 'not active' }}</div>
        </ng-template>
      </swiper>
    ```

    h2.no-border#slots Slots

    p Swiper Angular component uses "slots" for content distribution. There are 4 slots available
    ul
      li `container-start` - element will be added to the beginning of swiper-container
      li `container-end` (default) - element will be added to the end of swiper-container
      li `wrapper-start` - element will be added to the beginning of swiper-wrapper
      li `wrapper-end` - element will be added to the end of swiper-wrapper

    p For example:

    ```html
      <swiper>
        <ng-template swiperSlide>Slide 1</ng-template>
        <ng-template swiperSlide>Slide 2</ng-template>
        <span slot="container-start">Container Start</span>
        <span slot="container-end">Container End</span>
        <span slot="wrapper-start">Wrapper Start</span>
        <span slot="wrapper-end">Wrapper End</span>
      </swiper>
    ```

    p Will be rendered as:

    ```html
      <div class="swiper-container">
        <span slot="container-start">Container Start</span>
        <div class="swiper-wrapper">
          <span slot="wrapper-start">Wrapper Start</span>
          <div class="swiper-slide">Slide 1</div>
          <div class="swiper-slide">Slide 2</div>
          <span slot="wrapper-end">Wrapper End</span>
        </div>
        <span slot="container-end">Container End</span>
      </div>
    ```

    h2.no-border#virtual-slides Virtual Slides

    p Virtual Slides rendering here is fully handled by Angular and not required anything except setting `[virtual]="true"`:

    :code(lang="js")
      import { Component } from '@angular/core';

      // import Swiper core and required components
      import SwiperCore, { Virtual } from 'swiper/core';

      // install Swiper components
      SwiperCore.use([Virtual]);

      @Component({
        selector: 'app-swiper-virtual-example',
        template: ` <swiper [slidesPerView]="3" [spaceBetween]="50" [virtual]="true">
          <ng-container *ngFor="let slide of slides; index as i">
            <ng-template swiperSlide>Slide {{ slide }}</ng-template>
          </ng-container>
        </swiper>`,
      })
      export class AppComponent {
        // Create array with 1000 slides
        slides = Array.from({ length: 1000 }).map((el, index) => `Slide ${index + 1}`);
      }

    p <a href="https://stackblitz.com/edit/swiper-angular-virtual?file=src%2Fapp%2Fapp.component.ts">Edit on Stackblitz</a>

    h2.no-border#effects Effects

    p The following effects are available:
      ul
        li Fade
        li Cube
        li Overflow
        li Flip

    p To use effects you have to import and install them first (as all other modules) (Fade example):

    ```js
      import SwiperCore, {EffectFade} from 'swiper';

      SwiperCore.use([EffectFade]);
    ```

    p You can find running <a href="https://swiperjs.com/demos/#fade_effect">effect demos here</a>.

    h3 Full Fade Effect Example
    :code(lang="js")
      import { Component } from "@angular/core";

      // import Swiper core and required components
      import SwiperCore, { EffectFade, Swiper } from "swiper/core";

      // install Swiper components
      SwiperCore.use([EffectFade]);

      @Component({
        selector: "app-swiper-fade-example",
        template: `
          <swiper effect="fade">
            <ng-template swiperSlide>Slide 1</ng-template>
            <ng-template swiperSlide>Slide 2</ng-template>
            <ng-template swiperSlide>Slide 3</ng-template>
          </swiper>
        `
      })
      export class AppComponent {}
    p <a href="https://stackblitz.com/edit/swiper-angular-fade?file=src/app/app.component.ts">Edit on Stackblitz</a>
