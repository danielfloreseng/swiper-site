extends ../_internal-template

block vars
  - var title = 'Swiper Angular';
  - var noCenterContent = true;
  - var withLeftNav = true;

block content
  .side-nav.demos-nav
    .side-nav-content
      include ../_sidebar-sponsors.pug
      ul
        li
          a(href="#installation") Installation
        li
          a(href="#usage") Usage
        li
          a(href="#styles") Styles
        li
          a(href="#swiper-props") <span style="font-weight: 500">Swiper</span> props
        li
          a(href="#swiper-events") <span style="font-weight: 500">Swiper</span> events
        li
          a(href="#swiperslide-props") <span style="font-weight: 500">SwiperSlide</span> props
        li
          a(href="#swiperslide-slot-props") <span style="font-weight: 500">SwiperSlide</span> slot props
        li
          a(href="#slots") Slots
        li
          a(href="#virtual-slides") Virtual Slides
        li
          a(href="#controller") Controller
        li
          a(href="#thumbs") Thumbs
        li
          a(href="#effects") Effects

  .api-content
    h1 Swiper Angular Components

    h2.no-border#installation Installation

    p Swiper Angular plugin is available only via NPM as a part of the main Swiper library:
    ```
      npm i swiper
    ```

    h2.no-border#usage Usage

    p Import `SwiperModule` to your module

    ```js
      import { SwiperModule } from 'src/angular/src/public-api';

      @NgModule({
        declarations: [AppComponent],
        imports: [BrowserModule, SwiperModule],
        providers: [],
        bootstrap: [AppComponent],
      })
      export class AppModule {}
    ```

    h2.no-border#styles Styles

    p Swiper package contains different sets of CSS, Less and SCSS styles:

    h4 CSS Styles

    p CSS styles available only for bundle version:

    ul
      li `swiper-bundle.css` - all Swiper styles including all components styles (like Navigation, Pagination, etc.)
      li `swiper-bundle.min.css` - same as previous but minified

    h4 Less Styles

    p Less styles are separate styles for core version and components:

    ul
      li `swiper.less` - only core Swiper styles
      li `components/a11y/a11y.less` - styles required for A11y component
      li `components/controller/controller.less` - styles required for Controller component
      li `components/effect-coverflow/effect-coverflow.less` - styles required for Coveflow Effect component
      li `components/effect-cube/effect-cube.less` - styles required for Cube Effect component
      li `components/effect-fade/effect-fade.less` - styles required for Fade Effect component
      li `components/effect-flip/effect-flip.less` - styles required for Flip Effect component
      li `components/lazy/lazy.less` - styles required for Lazy component
      li `components/navigation/navigation.less` - styles required for Navigation component
      li `components/pagination/pagination.less` - styles required for Pagination component
      li `components/scrollbar/scrollbar.less` - styles required for Scrollbar component
      li `components/thumbs/thumbs.less` - styles required for Thumbs component
      li `components/zoom/zoom.less` - styles required for Zoom component

    h4 SCSS Styles

    p SCSS styles are also separate styles for core version and components:

    ul
      li `swiper.scss` - only core Swiper styles
      li `components/a11y/a11y.scss` - styles required for A11y component
      li `components/controller/controller.scss` - styles required for Controller component
      li `components/effect-coverflow/effect-coverflow.scss` - styles required for Coveflow Effect component
      li `components/effect-cube/effect-cube.scss` - styles required for Cube Effect component
      li `components/effect-fade/effect-fade.scss` - styles required for Fade Effect component
      li `components/effect-flip/effect-flip.scss` - styles required for Flip Effect component
      li `components/lazy/lazy.scss` - styles required for Lazy component
      li `components/navigation/navigation.scss` - styles required for Navigation component
      li `components/pagination/pagination.scss` - styles required for Pagination component
      li `components/scrollbar/scrollbar.scss` - styles required for Scrollbar component
      li `components/thumbs/thumbs.scss` - styles required for Thumbs component
      li `components/zoom/zoom.scss` - styles required for Zoom component

    h2.no-border#swiper-props `Swiper` props

    p `Swiper` Vue.js component receive all <a href="/api/#parameters">Swiper parameters</a> as component props, plus some extra props:
    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          td tag
          td string
          td 'div'
          td Main Swiper container HTML element tag
        tr
          td wrapperTag
          td string
          td 'div'
          td Swiper wrapper HTML element tag


    h2.no-border#swiper-events `Swiper` events
    p Swiper component supports all <a href="/api/#events">Swiper events</a>, including additional `swiper` event that returns swiper instance as soon as posible. For example:

    ```html
      <swiper
        @swiper="..."
        @slideChange="..."
        @reachEnd="..."
        ...
      >
    ```

    h2.no-border#swiperslide-props `SwiperSlide` props

    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          td tag
          td string
          td 'div'
          td Swiper Slide HTML element tag
        tr
          td zoom
          td boolean
          td false
          td Enables additional wrapper required for zoom mode
        tr
          td virtualIndex
          td number
          td
          td Actual swiper slide index. Required to be set for virtual slides

    h2.no-border#swiperslide-slot-props `SwiperSlide` slot props
    p `SwiperSlide` component has the following slot props:
    ul
      li `isActive` - true when current slide is active
      li `isPrev` - true when current slide is the previous from active
      li `isNext` - true when current slide is the next from active
      li `isVisible` - true when current slide is visible (`watchSlidesVisibility` Swiper parameter must be enabled)
      li `isDuplicate` - true when current slide is a duplicate slide (when `loop` mode enabled)
    p For example:
    ```html
      <swiper>
        <swiper-slide v-slot="{ isActive }">
          <div>Current slide is {{ isActive ? 'active' : 'not active' }}</div>
        </swiper-slide>
      </swiper>
    ```

    h2.no-border#slots Slots

    p Swiper Vue.js component uses "slots" for content distribution. There are 4 slots available
    ul
      li `container-start` - element will be added to the beginning of swiper-container
      li `container-end` (default) - element will be added to the end of swiper-container
      li `wrapper-start` - element will be added to the beginning of swiper-wrapper
      li `wrapper-end` - element will be added to the end of swiper-wrapper

    p For example:

    ```html
      <swiper>
        <swiper-slide>Slide 1</swiper-slide>
        <swiper-slide>Slide 2</swiper-slide>
        <span slot="container-start">Container Start</span>
        <span slot="container-end">Container End</span>
        <span slot="wrapper-start">Wrapper Start</span>
        <span slot="wrapper-end">Wrapper End</span>
      </swiper>
    ```

    p Will be rendered as:

    ```html
      <div class="swiper-container">
        <span slot="container-start">Container Start</span>
        <div class="swiper-wrapper">
          <span slot="wrapper-start">Wrapper Start</span>
          <div class="swiper-slide">Slide 1</div>
          <div class="swiper-slide">Slide 2</div>
          <span slot="wrapper-end">Wrapper End</span>
        </div>
        <span slot="container-end">Container End</span>
      </div>
    ```

    h2.no-border#virtual-slides Virtual Slides

    p Virtual Slides rendering here is fully handled by Vue.js and not required anything except setting `:virtual="true"` property and setting `virtualIndex` on slides:

    :code(lang="html")
      <template>
        <swiper
          :slides-per-view="3"
          :space-between="50"
          virtual
        >
          <swiper-slide
            v-for="(slideContent, index) in slides"
            :key="slide"
            :virtualIndex="index"
          >{slideContent}</swiper-slide>
        </swiper>
      </template>
      <script>
        import SwiperCore, { Virtual } from 'swiper';
        import { Swiper, SwiperSlide } from 'swiper/vue';

        // install Virtual module
        SwiperCore.use([Virtual]);

        export default {
          components: {
            Swiper,
            SwiperSlide,
          },

          data() {
            // Create array with 1000 slides
            const slides = Array.from({ length: 1000 }).map((el, index) => `Slide ${index + 1}`);
            return {
              slides,
            };
          },
        };
      </script>

    h2.no-border#controller Controller

    p Controller requires to pass one Swiper instance to another:

    ```html
      <template>
        <!-- Main Swiper -> pass controlled swiper instance -->
        <swiper :controller="{ control: controlledSwiper }" ...>
          ...
        </swiper>

        <!-- Controlled Swiper -> store swiper instance -->
        <swiper @swiper="setControlledSwiper" ...>
          ...
        </swiper>
      </template>
      <script>
        import SwiperCore, { Controller } from 'swiper';
        import { Swiper, SwiperSlide } from 'swiper/vue';

        // install Swiper's Controller component
        SwiperCore.use([Controller]);

        export default {
          components: {
            Swiper,
            SwiperSlide,
          },
          data() {
            return {
              controlledSwiper: null,
            };
          },
          methods: {
            setControlledSwiper(swiper) {
              this.controlledSwiper = swiper;
            },
          }
        };
      </script>
    ```

    p For two-way control (when both Swipers control each other) it should be like this:

    ```html
      <template>
        <swiper @swiper="setFirstSwiper" :controller="{ control: secondSwiper }" ...>
          ...
        </swiper>
        <swiper @swiper="setSecondSwiper" :controller="{ control: firstSwiper }" ...>
          ...
        </swiper>
      </template>
      <script>
        import SwiperCore, { Controller } from 'swiper';
        import { Swiper, SwiperSlide } from 'swiper/vue';

        // install Swiper's Controller component
        SwiperCore.use([Controller]);

        export default {
          components: {
            Swiper,
            SwiperSlide,
          },
          data() {
            return {
              firstSwiper: null,
              secondSwiper: null,
            };
          },
          methods: {
            setFirstSwiper(swiper) {
              this.firstSwiper = swiper;
            },
            setSecondSwiper(swiper) {
              this.secondSwiper = swiper;
            },
          }
        };
      </script>
    ```

    h2.no-border#thumbs Thumbs

    p Same as with controller we need to store thumbs instance and pass it to main gallery:

    ```html
      <template>
        <!-- Main Swiper -> pass thumbs swiper instance -->
        <swiper
          :thumbs="{ swiper: thumbsSwiper }"
          ...
        >
          ...
        </swiper>

        <!-- Thumbs Swiper -> store swiper instance -->
        <!-- It is also required to set watchSlidesVisibility and watchSlidesProgress props -->
        <swiper
          @swiper="setThumbsSwiper"
          watch-slides-visibility
          watch-slides-progress
          ...
        >
          ...
        </swiper>
      </template>
      <script>
        import SwiperCore, { Thumbs } from 'swiper';
        import { Swiper, SwiperSlide } from 'swiper/vue';

        // install Swiper's Thumbs component
        SwiperCore.use([Thumbs]);

        export default {
          components: {
            Swiper,
            SwiperSlide,
          },
          data() {
            return {
              thumbsSwiper: null,
            };
          },
          methods: {
            setThumbsSwiper(swiper) {
              this.thumbsSwiper = swiper;
            },
          }
        };
      </script>
    ```

    h2.no-border#effects Effects

    p The following effects are available:
      ul
        li Fade
        li Cube
        li Overflow
        li Flip

    p To use effects you have to import and install them first (as all other modules) (Fade example):

    ```js
      import SwiperCore, {EffectFade} from 'swiper';

      SwiperCore.use([EffectFade]);
    ```

    p You can find running <a href="https://swiperjs.com/demos/#fade_effect">effect demos here</a>.

    h3 Full Fade Effect Example
    ```
      <template>
        <swiper effect="fade">
          <swiper-slide>Slide 1</swiper-slide>
          <swiper-slide>Slide 2</swiper-slide>
          <swiper-slide>Slide 3</swiper-slide>
          ...
        </swiper>
      </template>
      <script>
        import SwiperCore, { EffectFade } from 'swiper';
        import { Swiper, SwiperSlide } from 'swiper/vue';

        import 'swiper/swiper.scss';
        import 'swiper/components/effect-fade/effect-fade.scss';

        SwiperCore.use([EffectFade]);

        export default {
          components: {
            Swiper,
            SwiperSlide,
          },
        };
      </script>
    ```
