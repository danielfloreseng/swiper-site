extends ../_internal-template

block vars
  - var title = 'Swiper Svelte';
  - var noCenterContent = true;
  - var withLeftNav = true;

block content
  .side-nav.demos-nav
    .side-nav-content
      include ../_sidebar-sponsors.pug
      ul
        li
          a(href="#installation") Installation
        li
          a(href="#usage") Usage
        li
          a(href="#styles") Styles
        li
          a(href="#swiper-props") <span style="font-weight: 500">Swiper</span> props
        li
          a(href="#swiper-events") <span style="font-weight: 500">Swiper</span> events
        li
          a(href="#swiperslide-props") <span style="font-weight: 500">SwiperSlide</span> props
        li
          a(href="#swiperslide-slot-data") <span style="font-weight: 500">SwiperSlide</span> slot data
        li
          a(href="#slots") Slots
        li
          a(href="#virtual-slides") Virtual Slides
        li
          a(href="#controller") Controller
        li
          a(href="#thumbs") Thumbs
        li
          a(href="#effects") Effects
        li
          a(href="#getting-started-video") Getting Started Video

  .api-content
    h1 Swiper Svelte Components

    h2.no-border#installation Installation

    p Swiper Svelte is available only via NPM as a part of the main Swiper library:
    ```
      npm i swiper
    ```

    h2.no-border#usage Usage

    p `swiper/svelte` exports 2 components: `Swiper` and `SwiperSlide`:
    :code(lang="svelte")
      <Swiper
        spaceBetween={50}
        slidesPerView={3}
        on:slideChange={() => console.log('slide change')}
        on:swiper={(e) => console.log(e.detail[0])}
      >
        <SwiperSlide>Slide 1</SwiperSlide>
        <SwiperSlide>Slide 2</SwiperSlide>
        <SwiperSlide>Slide 3</SwiperSlide>
        <SwiperSlide>Slide 4</SwiperSlide>
        ...
      </Swiper>
      <script>
      // Import Swiper Svelte components
      import { Swiper, SwiperSlide } from 'swiper/svelte';

      // Import Swiper styles
      import 'swiper/swiper.scss';
      </script>
    .important-note
      p By default Swiper Svelte uses core version of Swiper (without any additional components). If you want to use Navigation, Pagination and <a href="/api/#custom-build">other components</a>, you have to install them first.
    p Here is the list of additional modules imports:
    ul
      li <code>Virtual</code> - Virtual Slides module
      li <code>Keyboard</code> - Keyboard Control module
      li <code>Mousewheel</code> - Mousewheel Control module
      li <code>Navigation</code> - Navigation module
      li <code>Pagination</code> - Pagination module
      li <code>Scrollbar</code> - Scrollbar module
      li <code>Parallax</code> - Parallax module
      li <code>Zoom</code> - Zoom module
      li <code>Lazy</code> - Lazy module
      li <code>Controller</code> - Controller module
      li <code>A11y</code> - Accessibility module
      li <code>History</code> - History Navigation module
      li <code>HashNavigation</code> - Hash Navigation module
      li <code>Autoplay</code> - Autoplay module
      li <code>EffectFade</code> - Fade Effect module
      li <code>EffectCube</code> - Cube Effect module
      li <code>EffectFlip</code> - Flip Effect module
      li <code>EffectCoverflow</code> - Coverflow Effect module
      li <code>Thumbs</code> - Thumbs module
    :code(lang="svelte")
      <Swiper
        spaceBetween={50}
        slidesPerView={3}
        navigation
        pagination={{ clickable: true }}
        scrollbar={{ draggable: true }}
        on:slideChange={() => console.log('slide change')}
        on:swiper={(e) => console.log(e.detail[0])}
      >
        <SwiperSlide>Slide 1</SwiperSlide>
        <SwiperSlide>Slide 2</SwiperSlide>
        <SwiperSlide>Slide 3</SwiperSlide>
        <SwiperSlide>Slide 4</SwiperSlide>
        ...
      </Swiper>
      <script>
      // import Swiper core and required components
      import SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper';

      import { Swiper, SwiperSlide } from 'swiper/svelte';

      // Import Swiper styles
      import 'swiper/swiper.scss';
      import 'swiper/components/navigation/navigation.scss';
      import 'swiper/components/pagination/pagination.scss';
      import 'swiper/components/scrollbar/scrollbar.scss';

      // install Swiper components
      SwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);

      </script>
    ```
    .important-note
      p Note, Swiper Svelte component will create required elements for Navigation, Pagination and Scrollbar if you pass these params without specifying its elements (e.g. without `navigation.nextEl`, `pagination.el`, etc.)

    h2.no-border#styles Styles

    p Swiper package contains different sets of CSS, Less and SCSS styles:

    h4 CSS Styles

    p CSS styles available only for bundle version:

    ul
      li `swiper-bundle.css` - all Swiper styles including all components styles (like Navigation, Pagination, etc.)
      li `swiper-bundle.min.css` - same as previous but minified

    h4 Less Styles

    p Less styles are separate styles for core version and components:

    ul
      li `swiper.less` - only core Swiper styles
      li `components/a11y/a11y.less` - styles required for A11y component
      li `components/controller/controller.less` - styles required for Controller component
      li `components/effect-coverflow/effect-coverflow.less` - styles required for Coveflow Effect component
      li `components/effect-cube/effect-cube.less` - styles required for Cube Effect component
      li `components/effect-fade/effect-fade.less` - styles required for Fade Effect component
      li `components/effect-flip/effect-flip.less` - styles required for Flip Effect component
      li `components/lazy/lazy.less` - styles required for Lazy component
      li `components/navigation/navigation.less` - styles required for Navigation component
      li `components/pagination/pagination.less` - styles required for Pagination component
      li `components/scrollbar/scrollbar.less` - styles required for Scrollbar component
      li `components/thumbs/thumbs.less` - styles required for Thumbs component
      li `components/zoom/zoom.less` - styles required for Zoom component

    h4 SCSS Styles

    p SCSS styles are also separate styles for core version and components:

    ul
      li `swiper.scss` - only core Swiper styles
      li `components/a11y/a11y.scss` - styles required for A11y component
      li `components/controller/controller.scss` - styles required for Controller component
      li `components/effect-coverflow/effect-coverflow.scss` - styles required for Coveflow Effect component
      li `components/effect-cube/effect-cube.scss` - styles required for Cube Effect component
      li `components/effect-fade/effect-fade.scss` - styles required for Fade Effect component
      li `components/effect-flip/effect-flip.scss` - styles required for Flip Effect component
      li `components/lazy/lazy.scss` - styles required for Lazy component
      li `components/navigation/navigation.scss` - styles required for Navigation component
      li `components/pagination/pagination.scss` - styles required for Pagination component
      li `components/scrollbar/scrollbar.scss` - styles required for Scrollbar component
      li `components/thumbs/thumbs.scss` - styles required for Thumbs component
      li `components/zoom/zoom.scss` - styles required for Zoom component

    h2.no-border#swiper-props `Swiper` props

    p `Swiper` Svelte component receive all <a href="/api/#parameters">Swiper parameters</a> as component props.

    ```svelte
      <Swiper
        slidesPerView={3}
        spaceBetween={50}
        navigation
        pagination
        ...
      >
    ```

    h2.no-border#swiper-events `Swiper` events
    p Swiper component supports all <a href="/api/#events">Swiper events</a>, including additional `swiper` event that returns swiper instance as soon as posible.
    .important-note
      p All event arguments will be passed as array and they are accessible in `event.detail`.
    p For example:

    :code(lang="svelte")
      <Swiper
        on:swiper={onSwiper}
        on:slideChange={() => console.log('slide change'))}
        on:progress={onProgress}
      >
        ...
      </Swiper>
      <script>
        import { Swiper, SwiperSlide } from 'swiper/svelte';

        /* "progress" event emitted with "swiper" and "progress" argumentts */
        const onProgress = (e) => {
          const [swiper, progress] = e.detail;
          console.log(progress);
        }

        /* "swiper" event emitted with "swiper" instance argument */
        const onProgress = (e) => {
          const [swiper] = e.detail;
          console.log(swiper);
        }
      </script>


    h2.no-border#swiperslide-props `SwiperSlide` props

    table.params-table
      thead
        tr
          th Prop
          th Type
          th Default
          th Description
      tbody
        tr
          td zoom
          td boolean
          td false
          td Enables additional wrapper required for zoom mode
        tr
          td virtualIndex
          td number
          td
          td Actual swiper slide index. Required to be set for virtual slides

    h2.no-border#swiperslide-slot-data `SwiperSlide` slot data
    p `SwiperSlide` component receives the following `data` object:
    ul
      li `isActive` - true when current slide is active
      li `isPrev` - true when current slide is the previous from active
      li `isNext` - true when current slide is the next from active
      li `isVisible` - true when current slide is visible (`watchSlidesVisibility` Swiper parameter must be enabled)
      li `isDuplicate` - true when current slide is a duplicate slide (when `loop` mode enabled)
    p For example:
    ```svelte
      <Swiper>
        <SwiperSlide let:data={{ isActive }}>
          <div>Current slide is { isActive ? 'active' : 'not active' }</div>
        </SwiperSlide>
      </Swiper>
    ```

    h2.no-border#slots Slots

    p Swiper Svelte uses "slots" for content distribution. There are 4 slots available
    ul
      li `container-start` - element will be added to the beginning of swiper-container
      li `container-end` (default) - element will be added to the end of swiper-container
      li `wrapper-start` - element will be added to the beginning of swiper-wrapper
      li `wrapper-end` - element will be added to the end of swiper-wrapper

    p For example:

    ```svelte
      <Swiper>
        <SwiperSlide>Slide 1</SwiperSlide>
        <SwiperSlide>Slide 2</SwiperSlide>
        <span slot="container-start">Container Start</span>
        <span slot="container-end">Container End</span>
        <span slot="wrapper-start">Wrapper Start</span>
        <span slot="wrapper-end">Wrapper End</span>
      </Swiper>
    ```

    p Will be rendered as:

    ```html
      <div class="swiper-container">
        <span slot="container-start">Container Start</span>
        <div class="swiper-wrapper">
          <span slot="wrapper-start">Wrapper Start</span>
          <div class="swiper-slide">Slide 1</div>
          <div class="swiper-slide">Slide 2</div>
          <span slot="wrapper-end">Wrapper End</span>
        </div>
        <span slot="container-end">Container End</span>
      </div>
    ```

    h2.no-border#virtual-slides Virtual Slides

    p To implement Virtual Slides we need to:
    ul
      li pass array with slides to Swiper's `virtual.slides` property
      li render slides based on `virtualData` slot's data. It is also mandatory to pass `virtualIndex`. `virtualData` is the object with following properties:
        ul
          li `offset` - slides left/top offset in px
          li `from` - index of first slide required to be rendered
          li `to` - index of last slide required to be rendered
          li `slides` - slides to render

    :code(lang="svelte")
      <Swiper
        spaceBetween={50}
        slidesPerView={3}
        virtual={{ slides: virtualSlides }}
        let:virtualData={{ slides, offset, from }}
      >
        {#each slides as slide, index (from + index)}
          <SwiperSlide
            virtualIndex={from + index}
            style={`left: ${offset}px`}
          >{slide}</SwiperSlide>
        {/each}
      </Swiper>
      <script>
      import SwiperCore, { Virtual } from 'swiper';
      import { Swiper, SwiperSlide } from 'swiper/svelte';

      // install Virtual module
      SwiperCore.use([Virtual]);

      // Create array with 1000 slides
      const virtualSlides = Array.from({ length: 1000 }).map((el, index) => `Slide ${index + 1}`);
      </script>

    h2.no-border#controller Controller

    p Controller requires to pass one Swiper instance to another:

    :code(lang="svelte")
      <!-- Main Swiper -> pass controlled swiper instance -->
      <Swiper
        controller={{ control: controlledSwiper }}
        ...
      >
        <!-- ... -->
      </Swiper>

      <!-- Controlled Swiper -> store swiper instance -->
      <Swiper
        on:swiper={setControlledSwiper}
        ...
      >
        <!-- ... -->
      </Swiper>
      <script>
        import SwiperCore, { Controller } from '../build/core';
        import { Swiper, SwiperSlide } from '../build/svelte';

        // install Swiper's Controller component
        SwiperCore.use([Controller]);

        // store Controller swiper instance
        let controlledSwiper = null;

        const setControlledSwiper = (e) => {
          const [swiper] = e.detail;
          // set Controller swiper instance
          setTimeout(() => {
            controlledSwiper = swiper;
          });
        };
      </script>

    p For two-way control (when both Swipers control each other) it should be like this:

    :code(lang="svelte")
      <Swiper
        on:swiper={setFirstSwiper}
        controller={{ control: secondSwiper }}
        ...
      >
        <!-- ... -->
      </Swiper>

      <Swiper
        on:swiper={setSecondSwiper}
        controller={{ control: firstSwiper }}
        ...
      >
        <!-- ... -->
      </Swiper>
      <script>
        import SwiperCore, { Controller } from '../build/core';
        import { Swiper, SwiperSlide } from '../build/svelte';

        // install Swiper's Controller component
        SwiperCore.use([Controller]);

        // store swiper instances
        let firstSwiper = null;
        let secondSwiper = null;

        const setFirstSwiper = (e) => {
          const [swiper] = e.detail;
          setTimeout(() => {
            firstSwiper = swiper;
          });
        };

        const setSecondSwiper = (e) => {
          const [swiper] = e.detail;
          setTimeout(() => {
            secondSwiper = swiper;
          });
        };
      </script>

    h2.no-border#thumbs Thumbs

    p Same as with controller we need to store thumbs instance and pass it to main gallery:

    :code(lang="svelte")
      <!-- Main Swiper -> pass thumbs swiper instance -->
      <Swiper
        thumbs={{ swiper: thumbsSwiper }}
        ...
      >
        <!-- ... -->
      </Swiper>

      <!-- Thumbs Swiper -> store swiper instance -->
      <!-- It is also required to set watchSlidesVisibility and watchSlidesProgress props -->
      <Swiper
        on:swiper={setThumbsSwiper}
        watchSlidesVisibility
        watchSlidesProgress
        ...
      >
        <!-- ... -->
      </Swiper>

      <script>
        import SwiperCore, { Thumbs } from 'swiper';
        import { Swiper, SwiperSlide } from 'swiper/svelte';

        // install Swiper's Thumbs component
        Swiper.use([Thumbs]);

        // store Thumbs swiper instance
        let thumbsSwiper = null;

        const setThumbsSwiper = (e) => {
          const [swiper] = e.detail;
          // set Thumbs swiper instance
          setTimeout(() => {
            thumbsSwiper = swiper;
          });
        };

      </script>

    h2.no-border#effects Effects

    p The following effects are available:
      ul
        li Fade
        li Cube
        li Overflow
        li Flip

    p To use effects you have to import and install them first (as all other modules) (Fade example):

    ```js
      import SwiperCore, { EffectFade } from 'swiper';

      SwiperCore.use([EffectFade]);
    ```

    p You can find running <a href="https://swiperjs.com/demos/#fade_effect">effect demos here</a>.

    h3 Full Fade Effect Example

    ```svelte
      <Swiper effect="fade">
        <SwiperSlide>Slide 1</SwiperSlide>
        <SwiperSlide>Slide 2</SwiperSlide>
        <SwiperSlide>Slide 3</SwiperSlide>
      </Swiper>
      <script>
      import { Swiper, SwiperSlide } from 'swiper/svelte';
      import SwiperCore, { EffectFade } from 'swiper';

      import 'swiper/swiper.scss';
      import 'swiper/components/effect-fade/effect-fade.scss';

      SwiperCore.use([EffectFade]);

      </script>
    ```
